[{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"chargement-de-la-librairie","dir":"Articles","previous_headings":"","what":"Chargement de la librairie","title":"Générer un rapport d’analyses","text":"","code":"library(firstlibFlorian)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Générer un rapport d’analyses","text":"Cette vignette présente l’utilisation des fonctions summary.commune, summary.departement et generer_rapport pour créer des rapports détaillés sur les communes et départements. Ces fonctions permettent d’extraire et de résumer des informations clés, telles que le nom de la commune, le nombre d’élus, la répartition des âges des élus, ainsi que l’identification de l’élu(e) le/la plus âgé(e) et le/la plus jeune. De plus, elles fournissent une vue d’ensemble des données démographiques au niveau du département, y compris la distribution des âges des élus dans les communes les plus jeunes et les plus âgées. Enfin, la fonction generer_rapport génère un rapport Quarto complet, puis le déplace automatiquement vers le chemin de destination choisi par l’utilisateur.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"utilisation-de-la-fonction-summary-commune","dir":"Articles","previous_headings":"","what":"Utilisation de la fonction summary.commune","title":"Générer un rapport d’analyses","text":"Cette fonction affiche un résumé des informations d’une commune,notamment le nom de la commune, le nombre d’élus, la distribution des âgesdes élus, ainsi que le nom et l’âge de l’élu(e) le/la plus âgé(e). df Un data frame contenant des informations sur les élus d’une commune,incluant les colonnes Libellé de la commune et Date de naissance. … Arguments supplémentaires, non utilisés dans cette méthode. Aucun retour explicite. La fonction affiche dans la console : - Le nom de la commune, - Le nombre d’élus, - La distribution des âges des élus sous forme de tibble, - Le nom, le prénom, la date de naissance et l’âge de l’élu(e) le/la plus âgé(e), sous forme de tibble.","code":"# Données (villes)  df_Nantes <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé de la commune` == \"Nantes\")  df_Aignan <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé de la commune` == \"Aignan\")   # Data frames appartenant à la classe commune  df_Nantes <- structure(df_Nantes, class = c(\"commune\", class(df_Nantes)))  df_Aignan <- structure(df_Aignan, class = c(\"commune\", class(df_Aignan)))   # Utilisation de la fonction  summary(df_Nantes) #> Nom de la commune :  Nantes . #>  #> Nombre d’élu.e.s de la commune :  66 . #>  #> Distribution des âges des élu.e.s : #> # A tibble: 1 × 7 #>   Nom      Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>  <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Nantes    28    42      50      50    58    73 #>  #> Nom et âge de l’élu.e le ou la plus âgé.e : #> # A tibble: 1 × 4 #>   `Nom de l'élu` `Prénom de l'élu` `Date de naissance`   âge #>   <chr>          <chr>             <date>              <dbl> #> 1 BOURDON        Emilie            1996-12-22             28  summary(df_Aignan) #> Nom de la commune :  Aignan . #>  #> Nombre d’élu.e.s de la commune :  15 . #>  #> Distribution des âges des élu.e.s : #> # A tibble: 1 × 7 #>   Nom      Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>  <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Aignan    36    54      61      60    67    77 #>  #> Nom et âge de l’élu.e le ou la plus âgé.e : #> # A tibble: 1 × 4 #>   `Nom de l'élu` `Prénom de l'élu` `Date de naissance`   âge #>   <chr>          <chr>             <date>              <dbl> #> 1 TOUJA          Noemie            1989-02-25             36"},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"Générer un rapport d’analyses","text":"Cette fonction affiche un résumé des informations d’une commune,notamment le nom de la commune, le nombre d’élus, la distribution des âgesdes élus, ainsi que le nom et l’âge de l’élu(e) le/la plus âgé(e).","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"paramètres","dir":"Articles","previous_headings":"","what":"Paramètres","title":"Générer un rapport d’analyses","text":"df Un data frame contenant des informations sur les élus d’une commune,incluant les colonnes Libellé de la commune et Date de naissance. … Arguments supplémentaires, non utilisés dans cette méthode.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"retour","dir":"Articles","previous_headings":"","what":"Retour","title":"Générer un rapport d’analyses","text":"Aucun retour explicite. La fonction affiche dans la console : - Le nom de la commune, - Le nombre d’élus, - La distribution des âges des élus sous forme de tibble, - Le nom, le prénom, la date de naissance et l’âge de l’élu(e) le/la plus âgé(e), sous forme de tibble.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"exemples-dutilisation","dir":"Articles","previous_headings":"","what":"Exemples d’utilisation","title":"Générer un rapport d’analyses","text":"","code":"# Données (villes)  df_Nantes <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé de la commune` == \"Nantes\")  df_Aignan <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé de la commune` == \"Aignan\")   # Data frames appartenant à la classe commune  df_Nantes <- structure(df_Nantes, class = c(\"commune\", class(df_Nantes)))  df_Aignan <- structure(df_Aignan, class = c(\"commune\", class(df_Aignan)))   # Utilisation de la fonction  summary(df_Nantes) #> Nom de la commune :  Nantes . #>  #> Nombre d’élu.e.s de la commune :  66 . #>  #> Distribution des âges des élu.e.s : #> # A tibble: 1 × 7 #>   Nom      Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>  <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Nantes    28    42      50      50    58    73 #>  #> Nom et âge de l’élu.e le ou la plus âgé.e : #> # A tibble: 1 × 4 #>   `Nom de l'élu` `Prénom de l'élu` `Date de naissance`   âge #>   <chr>          <chr>             <date>              <dbl> #> 1 BOURDON        Emilie            1996-12-22             28  summary(df_Aignan) #> Nom de la commune :  Aignan . #>  #> Nombre d’élu.e.s de la commune :  15 . #>  #> Distribution des âges des élu.e.s : #> # A tibble: 1 × 7 #>   Nom      Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>  <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Aignan    36    54      61      60    67    77 #>  #> Nom et âge de l’élu.e le ou la plus âgé.e : #> # A tibble: 1 × 4 #>   `Nom de l'élu` `Prénom de l'élu` `Date de naissance`   âge #>   <chr>          <chr>             <date>              <dbl> #> 1 TOUJA          Noemie            1989-02-25             36"},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"utilisation-de-la-fonction-summary-departement","dir":"Articles","previous_headings":"","what":"Utilisation de la fonction summary.departement","title":"Générer un rapport d’analyses","text":"Cette fonction affiche un résumé des informations d’un département,notamment le nom du département, le nombre de communes, le nombre d’élus,la distribution des âges des élus, ainsi que le nom et l’âge de l’élu(e) le/la plus âgé(e) et de l’élu(e) le/la plus jeune. Elle affiche également les communes ayant la moyenne d’âge la plus faible et la plus élevée, avec la distribution des âges des élus pour ces communes. df Un data frame contenant des informations sur les élus, incluant les colonnes Libellé du département, Code de la commune, et les informations nécessaires pour calculer la distribution des âges, trouver l’élu(e) le/la plus âgé(e) et le/la plus jeune, ainsi que la moyenne d’âge par commune. … Arguments supplémentaires, non utilisés dans cette méthode. Aucun retour explicite. La fonction affiche dans la console : - Le nom du département, - Le nombre de communes dans le département, - Le nombre d’élus dans le département, - La distribution des âges des élus sous forme de tibble, - Le nom, le prénom, la date de naissance et l’âge de l’élu(e) le/la plus âgé(e), ainsi que celui/ceux de l’élu(e) le/la plus jeune, sous forme de tibble, - Les noms des communes avec la moyenne d’âge la plus faible et la plus élevée, ainsi que la distribution des âges des élus pour ces communes. Cette fonction génère un rapport Quarto en utilisant les paramètres commune et departement spécifiés. Après la génération, le fichier rapport.html est déplacé vers le chemin de destination spécifié par l’utilisateur. commune Un entier représentant le numéro de la commune à inclure dans le rapport. departement Un entier représentant le numéro du département à inclure dans le rapport. output Une chaîne de caractères représentant le chemin de destination où le fichier rapport doit être déplacé. Le fichier généré sera déplacé vers ce chemin sous le nom de rapport.html. Aucun retour explicite. Le fichier rapport.html est généré et déplacé vers le chemin spécifié.","code":"# Données (départements)  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé du département` == \"Loire-Atlantique\")  df_Gers <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé du département` == \"Gers\")   # Data frames appartenant à la classe departement  df_Loire_Atlantique <- structure(df_Loire_Atlantique, class = c(\"departement\", class(df_Loire_Atlantique)))  df_Gers <- structure(df_Gers, class = c(\"df_Gers\", class(df_Gers)))   # Utilisation de la fonction  summary(df_Loire_Atlantique) #> Nom du département :  Loire-Atlantique . #>  #> Nombre de communes dans le département :  207 . #>  #> Nombre d’élu.e.s dans le département :  4791 . #>  #> Distribution des âges des élu.e.s du département : #> # A tibble: 1 × 7 #>   Nom                Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>            <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Loire-Atlantique    22    46      54      54    63    84 #>  #> Nom et âge de l’élu.e le ou la plus âgé.e et de l’élu.e le ou la plus jeune, ainsi que leur commune : #> # A tibble: 2 × 5 #>   `Nom de l'élu` `Prénom de l'élu` `Date de naissance`   âge #>   <chr>          <chr>             <date>              <dbl> #> 1 GERARD         Jean              1940-07-20             84 #> 2 MERCERON       Leslie            2002-03-05             22 #> # ℹ 1 more variable: `Libellé de la commune` <chr> #>  #> Noms des communes avec la moyenne d’âge la plus faible et la plus élevée, ainsi que la distribution des âges des élu.e.s pour ces communes : #> # A tibble: 2 × 7 #>   Nom                    Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>                <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Le Pin                  34    38      42      44    51    59 #> 2 Les Moutiers-En-Retz    50    63      70      68    74    81  summary(df_Gers) #>  Code du département Libellé du département #>  Min.   :32          Length:4932            #>  1st Qu.:32          Class :character       #>  Median :32          Mode  :character       #>  Mean   :32                                 #>  3rd Qu.:32                                 #>  Max.   :32                                 #>  Code de la collectivité à statut particulier #>  Mode:logical                                 #>  NA's:4932                                    #>                                               #>                                               #>                                               #>                                               #>  Libellé de la collectivité à statut particulier Code de la commune #>  Mode:logical                                    Min.   :32001      #>  NA's:4932                                       1st Qu.:32120      #>                                                  Median :32234      #>                                                  Mean   :32235      #>                                                  3rd Qu.:32348      #>                                                  Max.   :32468      #>  Libellé de la commune Nom de l'élu       Prénom de l'élu     Code sexe         #>  Length:4932           Length:4932        Length:4932        Length:4932        #>  Class :character      Class :character   Class :character   Class :character   #>  Mode  :character      Mode  :character   Mode  :character   Mode  :character   #>                                                                                 #>                                                                                 #>                                                                                 #>  Date de naissance  Code de la catégorie socio-professionnelle #>  Length:4932        Min.   : 11.00                             #>  Class :character   1st Qu.: 23.00                             #>  Mode  :character   Median : 47.00                             #>                     Mean   : 45.84                             #>                     3rd Qu.: 71.00                             #>                     Max.   :165.00                             #>  Libellé de la catégorie socio-professionnelle Date de début du mandat #>  Length:4932                                   Length:4932             #>  Class :character                              Class :character        #>  Mode  :character                              Mode  :character        #>                                                                        #>                                                                        #>                                                                        #>  Libellé de la fonction Date de début de la fonction Code nationalité   #>  Length:4932            Length:4932                  Length:4932        #>  Class :character       Class :character             Class :character   #>  Mode  :character       Mode  :character             Mode  :character   #>                                                                         #>                                                                         #> # Utilisation de la fonction pour générer un rapport pour la commune de Nantes (44109) et le département de Loire-Atlantique (44)  # generer_rapport(44109, 44, \"<votre chemin>/<nom du fichier>.html\")"},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"description-1","dir":"Articles","previous_headings":"","what":"Description","title":"Générer un rapport d’analyses","text":"Cette fonction affiche un résumé des informations d’un département,notamment le nom du département, le nombre de communes, le nombre d’élus,la distribution des âges des élus, ainsi que le nom et l’âge de l’élu(e) le/la plus âgé(e) et de l’élu(e) le/la plus jeune. Elle affiche également les communes ayant la moyenne d’âge la plus faible et la plus élevée, avec la distribution des âges des élus pour ces communes.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"paramètres-1","dir":"Articles","previous_headings":"","what":"Paramètres","title":"Générer un rapport d’analyses","text":"df Un data frame contenant des informations sur les élus, incluant les colonnes Libellé du département, Code de la commune, et les informations nécessaires pour calculer la distribution des âges, trouver l’élu(e) le/la plus âgé(e) et le/la plus jeune, ainsi que la moyenne d’âge par commune. … Arguments supplémentaires, non utilisés dans cette méthode.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"retour-1","dir":"Articles","previous_headings":"","what":"Retour","title":"Générer un rapport d’analyses","text":"Aucun retour explicite. La fonction affiche dans la console : - Le nom du département, - Le nombre de communes dans le département, - Le nombre d’élus dans le département, - La distribution des âges des élus sous forme de tibble, - Le nom, le prénom, la date de naissance et l’âge de l’élu(e) le/la plus âgé(e), ainsi que celui/ceux de l’élu(e) le/la plus jeune, sous forme de tibble, - Les noms des communes avec la moyenne d’âge la plus faible et la plus élevée, ainsi que la distribution des âges des élus pour ces communes.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"exemples-dutilisation-1","dir":"Articles","previous_headings":"","what":"Exemples d’utilisation","title":"Générer un rapport d’analyses","text":"","code":"# Données (départements)  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé du département` == \"Loire-Atlantique\")  df_Gers <- df_Gers_Loire_Atlantique |>   dplyr::filter(`Libellé du département` == \"Gers\")   # Data frames appartenant à la classe departement  df_Loire_Atlantique <- structure(df_Loire_Atlantique, class = c(\"departement\", class(df_Loire_Atlantique)))  df_Gers <- structure(df_Gers, class = c(\"df_Gers\", class(df_Gers)))   # Utilisation de la fonction  summary(df_Loire_Atlantique) #> Nom du département :  Loire-Atlantique . #>  #> Nombre de communes dans le département :  207 . #>  #> Nombre d’élu.e.s dans le département :  4791 . #>  #> Distribution des âges des élu.e.s du département : #> # A tibble: 1 × 7 #>   Nom                Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>            <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Loire-Atlantique    22    46      54      54    63    84 #>  #> Nom et âge de l’élu.e le ou la plus âgé.e et de l’élu.e le ou la plus jeune, ainsi que leur commune : #> # A tibble: 2 × 5 #>   `Nom de l'élu` `Prénom de l'élu` `Date de naissance`   âge #>   <chr>          <chr>             <date>              <dbl> #> 1 GERARD         Jean              1940-07-20             84 #> 2 MERCERON       Leslie            2002-03-05             22 #> # ℹ 1 more variable: `Libellé de la commune` <chr> #>  #> Noms des communes avec la moyenne d’âge la plus faible et la plus élevée, ainsi que la distribution des âges des élu.e.s pour ces communes : #> # A tibble: 2 × 7 #>   Nom                    Min    Q1 Médiane Moyenne    Q3   Max #>   <chr>                <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> #> 1 Le Pin                  34    38      42      44    51    59 #> 2 Les Moutiers-En-Retz    50    63      70      68    74    81  summary(df_Gers) #>  Code du département Libellé du département #>  Min.   :32          Length:4932            #>  1st Qu.:32          Class :character       #>  Median :32          Mode  :character       #>  Mean   :32                                 #>  3rd Qu.:32                                 #>  Max.   :32                                 #>  Code de la collectivité à statut particulier #>  Mode:logical                                 #>  NA's:4932                                    #>                                               #>                                               #>                                               #>                                               #>  Libellé de la collectivité à statut particulier Code de la commune #>  Mode:logical                                    Min.   :32001      #>  NA's:4932                                       1st Qu.:32120      #>                                                  Median :32234      #>                                                  Mean   :32235      #>                                                  3rd Qu.:32348      #>                                                  Max.   :32468      #>  Libellé de la commune Nom de l'élu       Prénom de l'élu     Code sexe         #>  Length:4932           Length:4932        Length:4932        Length:4932        #>  Class :character      Class :character   Class :character   Class :character   #>  Mode  :character      Mode  :character   Mode  :character   Mode  :character   #>                                                                                 #>                                                                                 #>                                                                                 #>  Date de naissance  Code de la catégorie socio-professionnelle #>  Length:4932        Min.   : 11.00                             #>  Class :character   1st Qu.: 23.00                             #>  Mode  :character   Median : 47.00                             #>                     Mean   : 45.84                             #>                     3rd Qu.: 71.00                             #>                     Max.   :165.00                             #>  Libellé de la catégorie socio-professionnelle Date de début du mandat #>  Length:4932                                   Length:4932             #>  Class :character                              Class :character        #>  Mode  :character                              Mode  :character        #>                                                                        #>                                                                        #>                                                                        #>  Libellé de la fonction Date de début de la fonction Code nationalité   #>  Length:4932            Length:4932                  Length:4932        #>  Class :character       Class :character             Class :character   #>  Mode  :character       Mode  :character             Mode  :character   #>                                                                         #>                                                                         #>"},{"path":[]},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"description-2","dir":"Articles","previous_headings":"","what":"Description","title":"Générer un rapport d’analyses","text":"Cette fonction génère un rapport Quarto en utilisant les paramètres commune et departement spécifiés. Après la génération, le fichier rapport.html est déplacé vers le chemin de destination spécifié par l’utilisateur.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"paramètres-2","dir":"Articles","previous_headings":"","what":"Paramètres","title":"Générer un rapport d’analyses","text":"commune Un entier représentant le numéro de la commune à inclure dans le rapport. departement Un entier représentant le numéro du département à inclure dans le rapport. output Une chaîne de caractères représentant le chemin de destination où le fichier rapport doit être déplacé. Le fichier généré sera déplacé vers ce chemin sous le nom de rapport.html.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"retour-2","dir":"Articles","previous_headings":"","what":"Retour","title":"Générer un rapport d’analyses","text":"Aucun retour explicite. Le fichier rapport.html est généré et déplacé vers le chemin spécifié.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"exemples-dutilisation-2","dir":"Articles","previous_headings":"","what":"Exemples d’utilisation","title":"Générer un rapport d’analyses","text":"","code":"# Utilisation de la fonction pour générer un rapport pour la commune de Nantes (44109) et le département de Loire-Atlantique (44)  # generer_rapport(44109, 44, \"<votre chemin>/<nom du fichier>.html\")"},{"path":"https://flo-1-618.github.io/firstlibFlorian/articles/firstlibFlorian.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Générer un rapport d’analyses","text":"Grâce à l’utilisation des fonctions summary.commune, summary.departement et generer_rapport, il est désormais possible de générer des rapports détaillés sur les communes et départements. Ces outils permettent une analyse approfondie des données démographiques des élus, en offrant une vue d’ensemble claire et concise des informations clés, telles que la répartition des âges et l’identification des élus les plus âgés et les plus jeunes. La fonction generer_rapport simplifie le processus de génération et de déplacement des rapports Quarto, facilitant ainsi leur diffusion et leur utilisation. En combinant ces fonctions, vous pouvez obtenir des rapports bien structurés et informatifs qui vous aident à mieux comprendre les tendances démographiques au sein des communes et départements.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Florian Crochet. Author, maintainer.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Crochet F (2025). firstlibFlorian: \"Analyse et visualisation des données géographiques et démographiques des communes et départements\". R package version 0.0.0.9000, https://flo-1-618.github.io/firstlibFlorian/.","code":"@Manual{,   title = {firstlibFlorian: \"Analyse et visualisation des données géographiques et démographiques des communes et départements\"},   author = {Florian Crochet},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://flo-1-618.github.io/firstlibFlorian/}, }"},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/calcul_distribution_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculer la distribution des âges — calcul_distribution_age","title":"Calculer la distribution des âges — calcul_distribution_age","text":"Cette fonction calcule la distribution des âges des individus d'un data frame en renvoyant des statistiques descriptives : minimum, quartiles, médiane, moyenne et maximum.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/calcul_distribution_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculer la distribution des âges — calcul_distribution_age","text":"","code":"calcul_distribution_age(df, ...)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/calcul_distribution_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculer la distribution des âges — calcul_distribution_age","text":"df Un data frame contenant une colonne Date de naissance et une colonne Libellé de la commune ou Libellé du département. ... Paramètres supplémentaires (non utilisés directement dans cette fonction).","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/calcul_distribution_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculer la distribution des âges — calcul_distribution_age","text":"Un tibble contenant le nom de la commune ou du département, ainsi que les statistiques d'âge : minimum, premier quartile (Q1), médiane, moyenne, troisième quartile (Q3) et maximum.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/calcul_distribution_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculer la distribution des âges — calcul_distribution_age","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  calcul_distribution_age(df_Nantes) #> Error in calcul_distribution_age(df_Nantes): could not find function \"calcul_distribution_age\"  calcul_distribution_age(df_Aignan) #> Error in calcul_distribution_age(df_Aignan): could not find function \"calcul_distribution_age\"  calcul_distribution_age(df_Loire_Atlantique) #> Error in calcul_distribution_age(df_Loire_Atlantique): could not find function \"calcul_distribution_age\"  calcul_distribution_age(df_Gers) #> Error in calcul_distribution_age(df_Gers): could not find function \"calcul_distribution_age\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_adjoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"Cette fonction compte le nombre d'occurrences du mot \"adjoint\" dans la colonne Libellé de la fonction d'un data frame.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_adjoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"","code":"compter_nombre_d_adjoints(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_adjoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"df Un data frame contenant une colonne Libellé de la fonction (type character).","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_adjoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"Un entier représentant le nombre d'occurrences du mot \"adjoint\".","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_adjoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compter le nombre d'adjoints — compter_nombre_d_adjoints","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  compter_nombre_d_adjoints(df_Nantes) #> Error in compter_nombre_d_adjoints(df_Nantes): could not find function \"compter_nombre_d_adjoints\"  compter_nombre_d_adjoints(df_Aignan) #> Error in compter_nombre_d_adjoints(df_Aignan): could not find function \"compter_nombre_d_adjoints\"  compter_nombre_d_adjoints(df_Loire_Atlantique) #> Error in compter_nombre_d_adjoints(df_Loire_Atlantique): could not find function \"compter_nombre_d_adjoints\"  compter_nombre_d_adjoints(df_Gers) #> Error in compter_nombre_d_adjoints(df_Gers): could not find function \"compter_nombre_d_adjoints\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_elus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'élus — compter_nombre_d_elus","title":"Compter le nombre d'élus — compter_nombre_d_elus","text":"Cette fonction compte le nombre d'élus distincts dans un data frame en se basant sur les colonnes Nom de l'élu, Prénom de l'élu, et Date de naissance.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_elus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'élus — compter_nombre_d_elus","text":"","code":"compter_nombre_d_elus(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_elus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'élus — compter_nombre_d_elus","text":"df Un data frame contenant les colonnes Nom de l'élu, Prénom de l'élu, et Date de naissance (type character pour les deux premières et Date pour la dernière).","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_elus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'élus — compter_nombre_d_elus","text":"Un entier représentant le nombre d'élus distincts dans le data frame.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/compter_nombre_d_elus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compter le nombre d'élus — compter_nombre_d_elus","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  compter_nombre_d_elus(df_Nantes) #> Error in compter_nombre_d_elus(df_Nantes): could not find function \"compter_nombre_d_elus\"  compter_nombre_d_elus(df_Aignan) #> Error in compter_nombre_d_elus(df_Aignan): could not find function \"compter_nombre_d_elus\"  compter_nombre_d_elus(df_Loire_Atlantique) #> Error in compter_nombre_d_elus(df_Loire_Atlantique): could not find function \"compter_nombre_d_elus\"  compter_nombre_d_elus(df_Gers) #> Error in compter_nombre_d_elus(df_Gers): could not find function \"compter_nombre_d_elus\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Créer un objet de classe 'commune' à partir d'un data frame — creer_commune","title":"Créer un objet de classe 'commune' à partir d'un data frame — creer_commune","text":"Cette fonction prend un data frame contenant des informations sur une commune et valide que toutes les lignes correspondent à une seule commune (en vérifiant que le Code de la commune est unique). Elle transforme ensuite ce data frame en un objet de classe commune pour lui attribuer un comportement spécifique lors de son utilisation.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Créer un objet de classe 'commune' à partir d'un data frame — creer_commune","text":"","code":"creer_commune(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Créer un objet de classe 'commune' à partir d'un data frame — creer_commune","text":"df Un data frame contenant des informations sur les élus d'une commune. Le data frame doit inclure la colonne Code de la commune.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Créer un objet de classe 'commune' à partir d'un data frame — creer_commune","text":"Un objet de classe commune contenant les mêmes informations que le data frame d'entrée, mais avec une nouvelle classe attribuée.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Créer un objet de classe 'commune' à partir d'un data frame — creer_commune","text":"","code":"# Exemples d'utilisation   # Données (villes)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found   # Utilisation de la fonction  df_Nantes <- creer_commune(df_Nantes) #> Error: object 'df_Nantes' not found  df_Aignan <- creer_commune(df_Aignan) #> Error: object 'df_Aignan' not found"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Créer un objet de classe 'departement' à partir d'un data frame — creer_departement","title":"Créer un objet de classe 'departement' à partir d'un data frame — creer_departement","text":"Cette fonction prend un data frame contenant des informations sur un département et valide que toutes les lignes correspondent à un seul département (en vérifiant que le Code du département est unique). Elle transforme ensuite ce data frame en un objet de classe departement pour lui attribuer un comportement spécifique lors de son utilisation.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Créer un objet de classe 'departement' à partir d'un data frame — creer_departement","text":"","code":"creer_departement(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Créer un objet de classe 'departement' à partir d'un data frame — creer_departement","text":"df Un data frame contenant des informations sur les élus d'un département. Le data frame doit inclure la colonne Code du département.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Créer un objet de classe 'departement' à partir d'un data frame — creer_departement","text":"Un objet de classe departement contenant les mêmes informations que le data frame d'entrée, mais avec une nouvelle classe attribuée.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/creer_departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Créer un objet de classe 'departement' à partir d'un data frame — creer_departement","text":"","code":"# Exemples d'utilisation   # Données (départements)  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  df_Loire_Atlantique <- creer_departement(df_Loire_Atlantique) #> Error: object 'df_Loire_Atlantique' not found  df_Gers <- creer_departement(df_Gers) #> Error: object 'df_Gers' not found"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/df_Gers_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Données des élus des départements du Gers et de la Loire-Atlantique — df_Gers_Loire_Atlantique","title":"Données des élus des départements du Gers et de la Loire-Atlantique — df_Gers_Loire_Atlantique","text":"Un sous-ensemble des données du répertoire national des élus, représentant les élus des départements du Gers et de la Loire-Atlantique. Ces données incluent des informations sur les élus, telles que leur nom, sexe, date de naissance, catégorie socio-professionnelle, ainsi que des détails sur leur mandat et fonction au sein des collectivités locales.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/df_Gers_Loire_Atlantique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Données des élus des départements du Gers et de la Loire-Atlantique — df_Gers_Loire_Atlantique","text":"","code":"df_Gers_Loire_Atlantique"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/df_Gers_Loire_Atlantique.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Données des élus des départements du Gers et de la Loire-Atlantique — df_Gers_Loire_Atlantique","text":"Un tibble avec 9 752 lignes et 16 colonnes : Code du département Numéro unique du département, numérique. Par exemple, 32 pour le Gers et 44 pour la Loire-Atlantique. Libellé du département Nom du département sous forme de chaîne de caractères. Exemple : \"Gers\", \"Loire-Atlantique\". Code de la collectivité à statut particulier Indicateur logique (TRUE/FALSE) pour les départements ayant un statut particulier. Certaines collectivités ont un statut particulier qui n'est pas applicable à toutes les collectivités locales. Les valeurs peuvent être NA si le statut particulier n'est pas applicable. Libellé de la collectivité à statut particulier Nom de la collectivité ayant un statut particulier. Généralement vide (NA) pour la plupart des lignes, sauf si un élu appartient à une collectivité ayant un statut particulier, tel que les DOM-TOM ou certaines collectivités spécifiques. Code de la commune Code numérique unique attribué à chaque commune, par exemple \"32001\" pour Aignan dans le Gers. Libellé de la commune Nom de la commune sous forme de chaîne de caractères. Exemple : \"Aignan\", \"Nantes\". Nom de l'élu Nom de famille de l'élu. Exemples : \"AURENSAN\", \"BARATAULT\". Prénom de l'élu Prénom de l'élu. Exemple : \"Michel\", \"Philippe\", \"Mathieu\", \"Marie-Pierre\". Code sexe Code de sexe de l'élu, sous forme de chaîne de caractères, avec des valeurs possibles \"M\" pour masculin et \"F\" pour féminin. Exemple : \"M\", \"F\". Date de naissance Date de naissance de l'élu au format jj/mm/aaaa. Exemple : \"09/07/1952\", \"08/12/1957\". Code de la catégorie socio-professionnelle Code numérique représentant la catégorie socio-professionnelle de l'élu. Il est basé sur des classifications standardisées, comme \"11\" pour \"Ancienne profession intermédiaire\", \"12\" pour \"Cadre de la fonction publique\", etc. Libellé de la catégorie socio-professionnelle Nom complet de la catégorie socio-professionnelle. Exemple : \"Ancienne profession intermédiaire\", \"Cadre de la fonction publique\", \"Professeur, profession scientifique\". Date de début du mandat Date de début du mandat de l'élu, formatée en jj/mm/aaaa. Exemple : \"28/06/2020\". Libellé de la fonction Fonction actuelle de l'élu au sein de la collectivité locale, comme \"Maire\", \"Adjoint au maire\", ou \"Conseiller municipal\". Certaines valeurs peuvent être NA si la fonction n'est pas définie. Date de début de la fonction Date à laquelle l'élu commencé sa fonction, au format jj/mm/aaaa. Exemple : \"03/07/2020\". Code nationalité Code de la nationalité de l'élu, sous forme de chaîne de caractères. Exemple : \"FR\" pour France, \"US\" pour les États-Unis, etc.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/df_Gers_Loire_Atlantique.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Données des élus des départements du Gers et de la Loire-Atlantique — df_Gers_Loire_Atlantique","text":"https://www.data.gouv.fr/fr/datasets/repertoire-national-des-elus-1/#/resources/d5f400de-ae3f-4966-8cb6-a85c70c6c24a","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/generer_rapport.html","id":null,"dir":"Reference","previous_headings":"","what":"Générer un rapport Quarto et le déplacer vers un chemin spécifié — generer_rapport","title":"Générer un rapport Quarto et le déplacer vers un chemin spécifié — generer_rapport","text":"Cette fonction génère un rapport Quarto en utilisant les paramètres commune et departement spécifiés. Après la génération, le fichier rapport.html est déplacé vers le chemin de destination spécifié par l'utilisateur.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/generer_rapport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Générer un rapport Quarto et le déplacer vers un chemin spécifié — generer_rapport","text":"","code":"generer_rapport(commune, departement, output)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/generer_rapport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Générer un rapport Quarto et le déplacer vers un chemin spécifié — generer_rapport","text":"commune Un entier représentant le numéro de la commune à inclure dans le rapport. departement Un entier représentant le numéro du département à inclure dans le rapport. output Une chaîne de caractères représentant le chemin de destination où le fichier rapport doit être déplacé. Le fichier généré sera déplacé vers ce chemin sous le nom de rapport.html.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/generer_rapport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Générer un rapport Quarto et le déplacer vers un chemin spécifié — generer_rapport","text":"Aucun retour explicite. Le fichier rapport.html est généré et déplacé vers le chemin spécifié.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/generer_rapport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Générer un rapport Quarto et le déplacer vers un chemin spécifié — generer_rapport","text":"","code":"# Utilisation de la fonction pour générer un rapport pour la commune de Nantes (44109) et le département de Loire-Atlantique (44)  generer_rapport(44109, 44, \"<votre chemin>/rapport_final.html\") #> Error in generer_rapport(44109, 44, \"<votre chemin>/rapport_final.html\"): Le fichier rapport.html n'a pas été généré."},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualiser la répartition des élus par catégorie socio-professionnelle dans une commune — plot.commune","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans une commune — plot.commune","text":"Cette fonction génère un graphique montrant la répartition des élus d'une commune par catégorie socio-professionnelle. Le graphique est un diagramme à barres, où l'axe des x représente les codes des catégories socio-professionnelles et l'axe des y le nombre d'élus dans chaque catégorie. La fonction utilise ggplot2 pour afficher les résultats.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans une commune — plot.commune","text":"","code":"# S3 method for class 'commune' plot(df, ...)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans une commune — plot.commune","text":"df Un data frame contenant des informations sur les élus, incluant les colonnes Code de la catégorie socio-professionnelle, Libellé de la catégorie socio-professionnelle, Libellé de la commune et Libellé du département. ... Arguments supplémentaires, non utilisés dans cette méthode.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans une commune — plot.commune","text":"Un graphique généré avec ggplot2 représentant la répartition des élus de la commune par catégorie socio-professionnelle. Il affiche les codes professionnels en x et le nombre d'élus par catégorie sur l'axe y.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans une commune — plot.commune","text":"","code":"# Exemples d'utilisation   # Données (villes)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found   # Data frames appartenant à la classe commune  df_Nantes <- structure(df_Nantes, class = c(\"commune\", class(df_Nantes))) #> Error: object 'df_Nantes' not found  df_Aignan <- structure(df_Aignan, class = c(\"commune\", class(df_Aignan))) #> Error: object 'df_Aignan' not found   # Utilisation de la fonction  plot.commune(df_Nantes) #> Error in plot.commune(df_Nantes): could not find function \"plot.commune\"  plot.commune(df_Aignan) #> Error in plot.commune(df_Aignan): could not find function \"plot.commune\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualiser la répartition des élus par catégorie socio-professionnelle dans un département — plot.departement","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans un département — plot.departement","text":"Cette fonction génère un graphique montrant la répartition des élus d'un département par catégorie socio-professionnelle. Le graphique est un diagramme à barres, où l'axe des x représente les codes des catégories socio-professionnelles et l'axe des y le nombre d'élus dans chaque catégorie. Elle affiche les 10 catégories les plus représentées dans le département.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans un département — plot.departement","text":"","code":"# S3 method for class 'departement' plot(df, ...)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans un département — plot.departement","text":"df Un data frame contenant des informations sur les élus, incluant les colonnes Code de la catégorie socio-professionnelle, Libellé de la catégorie socio-professionnelle, Libellé du département, et Code de la commune. ... Arguments supplémentaires, non utilisés dans cette méthode.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans un département — plot.departement","text":"Un graphique généré avec ggplot2 représentant la répartition des élus du département par catégorie socio-professionnelle. Il affiche les 10 catégories socio-professionnelles les plus représentées en fonction du nombre d'élus.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot.departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualiser la répartition des élus par catégorie socio-professionnelle dans un département — plot.departement","text":"","code":"# Exemples d'utilisation   # Données (départements)  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Data frames appartenant à la classe departement  df_Loire_Atlantique <- structure(df_Loire_Atlantique, class = c(\"departement\", class(df_Loire_Atlantique))) #> Error: object 'df_Loire_Atlantique' not found  df_Gers <- structure(df_Gers, class = c(\"df_Gers\", class(df_Gers))) #> Error: object 'df_Gers' not found   # Utilisation de la fonction  plot.departement(df_Loire_Atlantique) #> Error in plot.departement(df_Loire_Atlantique): could not find function \"plot.departement\"  plot.departement(df_Gers) #> Error in plot.departement(df_Gers): could not find function \"plot.departement\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot_code_professions.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualiser la répartition des élus par catégorie socio-professionnelle — plot_code_professions","title":"Visualiser la répartition des élus par catégorie socio-professionnelle — plot_code_professions","text":"Cette fonction génère un graphique en barres représentant la répartition des élus selon leur catégorie socio-professionnelle.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot_code_professions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualiser la répartition des élus par catégorie socio-professionnelle — plot_code_professions","text":"","code":"plot_code_professions(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot_code_professions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualiser la répartition des élus par catégorie socio-professionnelle — plot_code_professions","text":"df Un data frame contenant une colonne Code de la catégorie socio-professionnelle.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot_code_professions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualiser la répartition des élus par catégorie socio-professionnelle — plot_code_professions","text":"Un objet ggplot affichant un diagramme en barres de la distribution des élus par catégorie socio-professionnelle.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/plot_code_professions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualiser la répartition des élus par catégorie socio-professionnelle — plot_code_professions","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  plot_code_professions(df_Nantes) #> Error in plot_code_professions(df_Nantes): could not find function \"plot_code_professions\"  plot_code_professions(df_Aignan) #> Error in plot_code_professions(df_Aignan): could not find function \"plot_code_professions\"  plot_code_professions(df_Loire_Atlantique) #> Error in plot_code_professions(df_Loire_Atlantique): could not find function \"plot_code_professions\"  plot_code_professions(df_Gers) #> Error in plot_code_professions(df_Gers): could not find function \"plot_code_professions\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Résumer les informations d'une commune — summary.commune","title":"Résumer les informations d'une commune — summary.commune","text":"Cette fonction affiche un résumé des informations d'une commune, notamment le nom de la commune, le nombre d'élus, la distribution des âges des élus, ainsi que le nom et l'âge de l'élu(e) le/la plus âgé(e).","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Résumer les informations d'une commune — summary.commune","text":"","code":"# S3 method for class 'commune' summary(df, ...)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Résumer les informations d'une commune — summary.commune","text":"df Un data frame contenant des informations sur les élus d'une commune, incluant les colonnes Libellé de la commune et Date de naissance. ... Arguments supplémentaires, non utilisés dans cette méthode.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Résumer les informations d'une commune — summary.commune","text":"Aucun retour explicite. La fonction affiche dans la console : Le nom de la commune, Le nombre d’élus, La distribution des âges des élus sous forme de tibble, Le nom, le prénom, la date de naissance et l'âge de l’élu(e) le/la plus âgé(e), sous forme de tibble.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Résumer les informations d'une commune — summary.commune","text":"","code":"# Exemples d'utilisation   # Données (villes)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found   # Data frames appartenant à la classe commune  df_Nantes <- structure(df_Nantes, class = c(\"commune\", class(df_Nantes))) #> Error: object 'df_Nantes' not found  df_Aignan <- structure(df_Aignan, class = c(\"commune\", class(df_Aignan))) #> Error: object 'df_Aignan' not found   # Utilisation de la fonction  summary.commune(df_Nantes) #> Error in summary.commune(df_Nantes): could not find function \"summary.commune\"  summary.commune(df_Aignan) #> Error in summary.commune(df_Aignan): could not find function \"summary.commune\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Résumer les informations d'un département — summary.departement","title":"Résumer les informations d'un département — summary.departement","text":"Cette fonction affiche un résumé des informations d'un département, notamment le nom du département, le nombre de communes, le nombre d'élus, la distribution des âges des élus, ainsi que le nom et l'âge de l'élu(e) le/la plus âgé(e) et de l'élu(e) le/la plus jeune. Elle affiche également les communes ayant la moyenne d’âge la plus faible et la plus élevée, avec la distribution des âges des élus pour ces communes.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Résumer les informations d'un département — summary.departement","text":"","code":"# S3 method for class 'departement' summary(df, ...)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Résumer les informations d'un département — summary.departement","text":"df Un data frame contenant des informations sur les élus, incluant les colonnes Libellé du département, Code de la commune, et les informations nécessaires pour calculer la distribution des âges, trouver l’élu(e) le/la plus âgé(e) et le/la plus jeune, ainsi que la moyenne d’âge par commune. ... Arguments supplémentaires, non utilisés dans cette méthode.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Résumer les informations d'un département — summary.departement","text":"Aucun retour explicite. La fonction affiche dans la console : Le nom du département, Le nombre de communes dans le département, Le nombre d’élus dans le département, La distribution des âges des élus sous forme de tibble, Le nom, le prénom, la date de naissance et l'âge de l’élu(e) le/la plus âgé(e), ainsi que celui/ceux de l’élu(e) le/la plus jeune, sous forme de tibble, Les noms des communes avec la moyenne d’âge la plus faible et la plus élevée, ainsi que la distribution des âges des élus pour ces communes.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/summary.departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Résumer les informations d'un département — summary.departement","text":"","code":"# Exemples d'utilisation   # Données (départements)  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Data frames appartenant à la classe departement  df_Loire_Atlantique <- structure(df_Loire_Atlantique, class = c(\"departement\", class(df_Loire_Atlantique))) #> Error: object 'df_Loire_Atlantique' not found  df_Gers <- structure(df_Gers, class = c(\"df_Gers\", class(df_Gers))) #> Error: object 'df_Gers' not found   # Utilisation de la fonction  summary.departement(df_Loire_Atlantique) #> Error in summary.departement(df_Loire_Atlantique): could not find function \"summary.departement\"  summary.departement(df_Gers) #> Error in summary.departement(df_Gers): could not find function \"summary.departement\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_elu_le_plus_age_jeune.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'élu(e) le plus âgé(e) et le/la plus jeune — trouver_elu_le_plus_age_jeune","title":"Trouver l'élu(e) le plus âgé(e) et le/la plus jeune — trouver_elu_le_plus_age_jeune","text":"Cette fonction permet de trouver l'élu(e) le plus âgé(e) et le/la plus jeune dans un data frame d'élus. Elle calcule l'âge des élus à partir de leur date de naissance, puis retourne les informations concernant l'élu(e) le/la plus âgé(e) et le/la plus jeune. La fonction trie les élus par date de naissance et sélectionne le premier et le dernier élu.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_elu_le_plus_age_jeune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'élu(e) le plus âgé(e) et le/la plus jeune — trouver_elu_le_plus_age_jeune","text":"","code":"trouver_elu_le_plus_age_jeune(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_elu_le_plus_age_jeune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'élu(e) le plus âgé(e) et le/la plus jeune — trouver_elu_le_plus_age_jeune","text":"df Un data frame contenant les informations sur les élus, incluant les colonnes Nom de l'élu, Prénom de l'élu, Date de naissance, et Libellé de la commune.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_elu_le_plus_age_jeune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'élu(e) le plus âgé(e) et le/la plus jeune — trouver_elu_le_plus_age_jeune","text":"Un tibble avec les informations de l'élu(e) le/la plus âgé(e) et de l'élu(e) le/la plus jeune. Les colonnes retournées incluent : Nom de l'élu : Le nom de l'élu, Prénom de l'élu : Le prénom de l'élu, Date de naissance : La date de naissance de l'élu, âge : L'âge calculé de l'élu, Libellé de la commune : La commune à laquelle appartient l'élu.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_elu_le_plus_age_jeune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trouver l'élu(e) le plus âgé(e) et le/la plus jeune — trouver_elu_le_plus_age_jeune","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  trouver_elu_le_plus_age_jeune(df_Nantes) #> Error in trouver_elu_le_plus_age_jeune(df_Nantes): could not find function \"trouver_elu_le_plus_age_jeune\"  trouver_elu_le_plus_age_jeune(df_Aignan) #> Error in trouver_elu_le_plus_age_jeune(df_Aignan): could not find function \"trouver_elu_le_plus_age_jeune\"  trouver_elu_le_plus_age_jeune(df_Loire_Atlantique) #> Error in trouver_elu_le_plus_age_jeune(df_Loire_Atlantique): could not find function \"trouver_elu_le_plus_age_jeune\"  trouver_elu_le_plus_age_jeune(df_Gers) #> Error in trouver_elu_le_plus_age_jeune(df_Gers): could not find function \"trouver_elu_le_plus_age_jeune\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_l_elu_le_plus_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"Cette fonction identifie l'élu le plus âgé dans un data frame, en calculant l'âge à partir de la date de naissance.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_l_elu_le_plus_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"","code":"trouver_l_elu_le_plus_age(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_l_elu_le_plus_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"df Un data frame contenant une colonne Date de naissance au format \"jour/mois/année\", ainsi que les colonnes Nom de l'élu et Prénom de l'élu.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_l_elu_le_plus_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"Un data frame avec les colonnes : Nom de l'élu : Nom de l'élu le plus âgé. Prénom de l'élu : Prénom de l'élu le plus âgé. Date de naissance : Date de naissance de l'élu le plus âgé. âge : Âge en années de l'élu le plus âgé.","code":""},{"path":[]},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_moyenne_age_faible_elevee.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver les communes avec la moyenne d'âge la plus faible et la plus élevée — trouver_moyenne_age_faible_elevee","title":"Trouver les communes avec la moyenne d'âge la plus faible et la plus élevée — trouver_moyenne_age_faible_elevee","text":"Cette fonction permet de trouver les communes avec la moyenne d’âge des élus la plus faible et la plus élevée. Elle regroupe les données par commune, applique une fonction de calcul de la distribution des âges des élus à chaque groupe, puis sélectionne les communes avec les moyennes d’âge les plus basses et les plus élevées.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_moyenne_age_faible_elevee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver les communes avec la moyenne d'âge la plus faible et la plus élevée — trouver_moyenne_age_faible_elevee","text":"","code":"trouver_moyenne_age_faible_elevee(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_moyenne_age_faible_elevee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver les communes avec la moyenne d'âge la plus faible et la plus élevée — trouver_moyenne_age_faible_elevee","text":"df Un data frame contenant les informations sur les élus, incluant les colonnes Libellé de la commune et les informations nécessaires pour calculer la moyenne d’âge des élus par commune.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_moyenne_age_faible_elevee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver les communes avec la moyenne d'âge la plus faible et la plus élevée — trouver_moyenne_age_faible_elevee","text":"Un tibble contenant les informations des communes avec la moyenne d’âge la plus faible et la plus élevée. Les colonnes retournées incluent : Libellé de la commune : Le nom de la commune, Moyenne : La moyenne d’âge des élus dans la commune.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/trouver_moyenne_age_faible_elevee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trouver les communes avec la moyenne d'âge la plus faible et la plus élevée — trouver_moyenne_age_faible_elevee","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  trouver_moyenne_age_faible_elevee(df_Nantes) #> Error in trouver_moyenne_age_faible_elevee(df_Nantes): could not find function \"trouver_moyenne_age_faible_elevee\"  trouver_moyenne_age_faible_elevee(df_Aignan) #> Error in trouver_moyenne_age_faible_elevee(df_Aignan): could not find function \"trouver_moyenne_age_faible_elevee\"  trouver_moyenne_age_faible_elevee(df_Loire_Atlantique) #> Error in trouver_moyenne_age_faible_elevee(df_Loire_Atlantique): could not find function \"trouver_moyenne_age_faible_elevee\"  trouver_moyenne_age_faible_elevee(df_Gers) #> Error in trouver_moyenne_age_faible_elevee(df_Gers): could not find function \"trouver_moyenne_age_faible_elevee\""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/valider_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Valider le schéma des données d'un data frame — valider_schema","title":"Valider le schéma des données d'un data frame — valider_schema","text":"Cette fonction vérifie que les colonnes du data frame sont conformes à un schéma prédéfini. Le schéma attendu inclut des colonnes spécifiques liées aux informations sur les élus, telles que le code et le libellé du département, le code sexe, les dates de naissance, et d'autres informations sur les élus et leurs fonctions.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/valider_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valider le schéma des données d'un data frame — valider_schema","text":"","code":"valider_schema(df)"},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/valider_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valider le schéma des données d'un data frame — valider_schema","text":"df Un data frame contenant des informations sur les élus, qui doit avoir les colonnes suivantes : Code du département, Libellé du département, Code de la collectivité à statut particulier, Libellé de la collectivité à statut particulier, Code de la commune, Libellé de la commune, Nom de l'élu, Prénom de l'élu, Code sexe, Date de naissance, Code de la catégorie socio-professionnelle, Libellé de la catégorie socio-professionnelle, Date de début du mandat, Libellé de la fonction, Date de début de la fonction, et Code nationalité.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/valider_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valider le schéma des données d'un data frame — valider_schema","text":"Aucun retour explicite. Si les colonnes du data frame ne correspondent pas au schéma, une erreur sera levée.","code":""},{"path":"https://flo-1-618.github.io/firstlibFlorian/reference/valider_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valider le schéma des données d'un data frame — valider_schema","text":"","code":"# Exemples d'utilisation   # Données (villes ou départements)  df_Nantes <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Nantes\") #> Error: object 'Libellé de la commune' not found  df_Aignan <- df_Gers_Loire_Atlantique |>   filter(`Libellé de la commune` == \"Aignan\") #> Error: object 'Libellé de la commune' not found  df_Loire_Atlantique <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Loire-Atlantique\") #> Error: object 'Libellé du département' not found  df_Gers <- df_Gers_Loire_Atlantique |>   filter(`Libellé du département` == \"Gers\") #> Error: object 'Libellé du département' not found   # Utilisation de la fonction  valider_schema(df_Nantes) #> Error in valider_schema(df_Nantes): could not find function \"valider_schema\"  valider_schema(df_Aignan) #> Error in valider_schema(df_Aignan): could not find function \"valider_schema\"  valider_schema(df_Loire_Atlantique) #> Error in valider_schema(df_Loire_Atlantique): could not find function \"valider_schema\"  valider_schema(df_Gers) #> Error in valider_schema(df_Gers): could not find function \"valider_schema\"  valider_schema(df_Gers_Loire_Atlantique) #> Error in valider_schema(df_Gers_Loire_Atlantique): could not find function \"valider_schema\""}]
